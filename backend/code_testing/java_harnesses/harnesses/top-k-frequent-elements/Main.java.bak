import java.util.*;
import java.io.IOException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

class ListNode {
    int val;
    ListNode next;
    ListNode() {}
    ListNode(int val) { this.val = val; }
    ListNode(int val, ListNode next) { this.val = val; this.next = next; }
}

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode() {}
    TreeNode(int val) { this.val = val; }
    TreeNode(int val, TreeNode left, TreeNode right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}

// USER_CODE_PLACEHOLDER

class HarnessMain {
    public static void main(String[] args) throws IOException {
        if (args.length != 3) {
            System.err.println("Usage: java HarnessMain <class_name> <function_name> <input_json>");
            System.exit(1);
        }
        
        String className = args[0];
        String functionName = args[1];
        String inputJson = args[2];
        
        ObjectMapper mapper = new ObjectMapper();
        JsonNode rootNode = mapper.readTree(inputJson);
        
        int[] nums = parseIntArray(rootNode.get("nums"));
        int k = parseIntValue(rootNode.get("k"));
        
        Solution solution = new Solution();
        int[] result = solution.topKFrequent(nums, k);
        
        // Format as JSON array
        System.out.print("[");
        for (int i = 0; i < result.length; i++) {
            if (i > 0) System.out.print(",");
            System.out.print(result[i]);
        }
        System.out.println("]");
    }
    
    private static int[] parseIntArray(JsonNode node) {
        if (node == null || node.isNull()) {
            return new int[0];
        }
        
        int[] result = new int[node.size()];
        for (int i = 0; i < node.size(); i++) {
            result[i] = node.get(i).asInt();
        }
        return result;
    }
    
    private static int parseIntValue(JsonNode node) {
        if (node == null || node.isNull()) {
            return 0;
        }
        return node.asInt();
    }
}