{
  "id": "3",
  "title": "Longest Substring Without Repeating Characters",
  "methodName": "lengthOfLongestSubstring",
  "signature": {
    "params": [{"name": "s", "type": "string"}],
    "return_type": "int"
  },
  "difficulty": "Hard",
  "problemDescription": "Given a string s, find the length of the longest substring without repeating characters.",
  "examples": [
    { "input": "s = \"abcabcbb\"", "output": "3" },
    { "input": "s = \"bbbbb\"", "output": "1" },
    { "input": "s = \"pwwkew\"", "output": "3" }
  ],
  "constraints": [
    "s consists of English letters, digits, symbols and spaces"
  ],
  "starter_code": {
    "python": "class Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        ",
    "javascript": "class Solution {\n    lengthOfLongestSubstring(s) {\n        \n    }\n}",
    "java": "class Solution {\n    public int lengthOfLongestSubstring(String s) {\n        \n    }\n}",
    "cpp": "class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        \n    }\n};"
  }
}