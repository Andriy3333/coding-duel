{
  "id": "46",
  "title": "Word Ladder",
  "methodName": "ladderLength",
  "difficulty": "Hard",
  "description_html": "<p>A <strong>transformation sequence</strong> from word <code class=\"bg-gray-100 px-1 py-0.5 rounded text-sm\">beginWord</code> to word <code class=\"bg-gray-100 px-1 py-0.5 rounded text-sm\">endWord</code> using a dictionary <code class=\"bg-gray-100 px-1 py-0.5 rounded text-sm\">wordList</code> is a sequence of words <code class=\"bg-gray-100 px-1 py-0.5 rounded text-sm\">beginWord -> s<sub>1</sub> -> s<sub>2</sub> -> ... -> s<sub>k</sub></code> such that:</p><ul class=\"list-disc list-inside space-y-1 ml-4\"><li>Every adjacent pair of words differs by a single letter.</li><li>Every <code class=\"bg-gray-100 px-1 py-0.5 rounded text-sm\">s<sub>i</sub></code> for <code class=\"bg-gray-100 px-1 py-0.5 rounded text-sm\">1 <= i <= k</code> is in <code class=\"bg-gray-100 px-1 py-0.5 rounded text-sm\">wordList</code>. Note that <code class=\"bg-gray-100 px-1 py-0.5 rounded text-sm\">beginWord</code> does not need to be in <code class=\"bg-gray-100 px-1 py-0.5 rounded text-sm\">wordList</code>.</li><li><code class=\"bg-gray-100 px-1 py-0.5 rounded text-sm\">s<sub>k</sub> == endWord</code></li></ul><p>Given two words, <code class=\"bg-gray-100 px-1 py-0.5 rounded text-sm\">beginWord</code> and <code class=\"bg-gray-100 px-1 py-0.5 rounded text-sm\">endWord</code>, and a dictionary <code class=\"bg-gray-100 px-1 py-0.5 rounded text-sm\">wordList</code>, return <em>the <strong>number of words</strong> in the <strong>shortest transformation sequence</strong> from <code class=\"bg-gray-100 px-1 py-0.5 rounded text-sm\">beginWord</code> to <code class=\"bg-gray-100 px-1 py-0.5 rounded text-sm\">endWord</code>, or <code class=\"bg-gray-100 px-1 py-0.5 rounded text-sm\">0</code> if no such sequence exists</em>.</p><div class=\"space-y-4\"><div class=\"bg-gray-50 p-4 rounded-lg\"><h4 class=\"font-semibold mb-2\">Example 1:</h4><div class=\"font-mono text-sm\"><div><strong>Input:</strong> beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]</div><div><strong>Output:</strong> 5</div><div><strong>Explanation:</strong> One shortest transformation sequence is \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\", which is 5 words long.</div></div></div><div class=\"bg-gray-50 p-4 rounded-lg\"><h4 class=\"font-semibold mb-2\">Example 2:</h4><div class=\"font-mono text-sm\"><div><strong>Input:</strong> beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]</div><div><strong>Output:</strong> 0</div><div><strong>Explanation:</strong> The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence.</div></div></div></div><div class=\"bg-blue-50 p-4 rounded-lg\"><h4 class=\"font-semibold mb-2 text-blue-800\">Constraints:</h4><ul class=\"list-disc list-inside space-y-1 text-sm\"><li><code class=\"bg-white px-1 py-0.5 rounded\">1 <= beginWord.length <= 10</code></li><li><code class=\"bg-white px-1 py-0.5 rounded\">endWord.length == beginWord.length</code></li><li><code class=\"bg-white px-1 py-0.5 rounded\">1 <= wordList.length <= 5000</code></li><li><code class=\"bg-white px-1 py-0.5 rounded\">wordList[i].length == beginWord.length</code></li><li><code class=\"bg-white px-1 py-0.5 rounded\">beginWord</code>, <code class=\"bg-white px-1 py-0.5 rounded\">endWord</code>, and <code class=\"bg-white px-1 py-0.5 rounded\">wordList[i]</code> consist of lowercase English letters.</li><li><code class=\"bg-white px-1 py-0.5 rounded\">beginWord != endWord</code></li><li>All the words in <code class=\"bg-white px-1 py-0.5 rounded\">wordList</code> are <strong>unique</strong>.</li></ul></div>",
  "starter_code": {
    "python": "class Solution:\n    def ladderLength(self, beginWord: str, endWord: str, wordList: list[str]) -> int:\n        ",
    "javascript": "class Solution {\n    ladderLength(beginWord, endWord, wordList) {\n        \n    }\n}",
    "java": "class Solution {\n    public int ladderLength(String beginWord, String endWord, List<String> wordList) {\n        \n    }\n}",
    "cpp": "class Solution {\npublic:\n    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {\n        \n    }\n};"
  }
}