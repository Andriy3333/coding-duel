{
  "id": "46",
  "title": "Word Ladder",
  "methodName": "ladderLength",
  "signature": {
    "params": [
      { "name": "beginWord", "type": "string" },
      { "name": "endWord", "type": "string" },
      { "name": "wordList", "type": "list<string>" }
    ],
    "return_type": "int"
  },
  "difficulty": "Hard",
  "problemDescription": "A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that: Every adjacent pair of words differs by a single letter. Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList. sk == endWord. Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.",
  "examples": [
    {
      "input": "beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]",
      "output": "5"
    },
    {
      "input": "beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]",
      "output": "0"
    }
  ],
  "constraints": [
    "All words have the same length (endWord.length == beginWord.length == wordList[i].length)",
    "beginWord, endWord, and wordList[i] consist of lowercase English letters",
    "beginWord != endWord",
    "All the words in wordList are unique"
  ],
  "starter_code": {
    "python": "class Solution:\n    def ladderLength(self, beginWord: str, endWord: str, wordList: list[str]) -> int:\n        ",
    "javascript": "class Solution {\n    ladderLength(beginWord, endWord, wordList) {\n        \n    }\n}",
    "java": "class Solution {\n    public int ladderLength(String beginWord, String endWord, List<String> wordList) {\n        \n    }\n}",
    "cpp": "class Solution {\npublic:\n    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {\n        \n    }\n};"
  }
}
