{
  "id": "41",
  "title": "Merge k Sorted Lists",
  "methodName": "mergeKLists",
  "signature": {
    "params": [
      {
        "name": "lists",
        "type": "ListNode[]"
      }
    ],
    "return_type": "ListNode"
  },
  "difficulty": "Hard",
  "problemDescription": "You are given an array of k linked-lists lists, each linked-list is sorted in ascending order. Merge all the linked-lists into one sorted linked-list and return it.",
  "examples": [
    {
      "input": "lists = [[1,4,5],[1,3,4],[2,6]]",
      "output": "[1,1,2,3,4,4,5,6]"
    },
    {
      "input": "lists = []",
      "output": "[]"
    },
    {
      "input": "lists = [[]]",
      "output": "[]"
    }
  ],
  "constraints": [
    "lists[i] is sorted in ascending order"
  ],
  "starter_code": {
    "python": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n\nclass Solution:\n    def mergeKLists(self, lists: list[ListNode]) -> ListNode:\n        ",
    "javascript": "// Definition for singly-linked list.\n// function ListNode(val, next) {\n//     this.val = (val===undefined ? 0 : val);\n//     this.next = (next===undefined ? null : next);\n// }\n\nclass Solution {\n    mergeKLists(lists) {\n        // @return {ListNode}\n        \n    }\n}",
    "java": "// Definition for singly-linked list.\n// class ListNode {\n//     int val;\n//     ListNode next;\n//     ListNode() {}\n//     ListNode(int val) { this.val = val; }\n//     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n// }\n\nclass Solution {\n    public ListNode mergeKLists(ListNode[] lists) {\n        \n    }\n}",
    "cpp": "// Definition for singly-linked list.\n// struct ListNode {\n//     int val;\n//     ListNode *next;\n//     ListNode() : val(0), next(nullptr) {}\n//     ListNode(int x) : val(x), next(nullptr) {}\n//     ListNode(int x, ListNode *next) : val(x), next(next) {}\n// };\n\nclass Solution {\npublic:\n    ListNode* mergeKLists(vector<ListNode*>& lists) {\n        \n    }\n};"
  }
}