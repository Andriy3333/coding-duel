{
  "id": "44",
  "title": "Sliding Window Maximum",
  "methodName": "maxSlidingWindow",
  "signature": {
    "params": [
      {
        "name": "nums",
        "type": "int[]"
      },
      {
        "name": "k",
        "type": "int"
      }
    ],
    "return_type": "int[]"
  },
  "difficulty": "Hard",
  "problemDescription": "You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window.",
  "examples": [
    {
      "input": "nums = [1,3,-1,-3,5,3,6,7], k = 3",
      "output": "[3,3,5,5,6,7]"
    },
    {
      "input": "nums = [1], k = 1",
      "output": "[1]"
    }
  ],
  "constraints": [
    "1 <= nums.length",
    "1 <= k <= nums.length"
  ],
  "starter_code": {
    "python": "class Solution:\n    def maxSlidingWindow(self, nums: list[int], k: int) -> list[int]:\n        ",
    "javascript": "class Solution {\n    maxSlidingWindow(nums, k) {\n        // @return {number[]}\n        \n    }\n}",
    "java": "class Solution {\n    public int[] maxSlidingWindow(int[] nums, int k) {\n        \n    }\n}",
    "cpp": "class Solution {\npublic:\n    vector<int> maxSlidingWindow(vector<int>& nums, int k) {\n        \n    }\n};"
  }
}