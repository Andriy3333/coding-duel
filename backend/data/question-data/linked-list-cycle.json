{
  "id": "23",
  "title": "Linked List Cycle",
  "methodName": "hasCycle",
  "signature": {
    "params": [{"name": "head", "type": "ListNode"}],
    "return_type": "boolean"
  },
  "difficulty": "Easy",
  "description_html": "<p>Given <code class=\"bg-gray-100 px-1 py-0.5 rounded text-sm\">head</code>, the head of a linked list, determine if the linked list has a cycle in it.</p><p>There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the <code class=\"bg-gray-100 px-1 py-0.5 rounded text-sm\">next</code> pointer. Internally, <code class=\"bg-gray-100 px-1 py-0.5 rounded text-sm\">pos</code> is used to denote the index of the node that tail's <code class=\"bg-gray-100 px-1 py-0.5 rounded text-sm\">next</code> pointer is connected to. <strong>Note that <code class=\"bg-gray-100 px-1 py-0.5 rounded text-sm\">pos</code> is not passed as a parameter</strong>.</p><p>Return <code class=\"bg-gray-100 px-1 py-0.5 rounded text-sm\">true</code><em> if there is a cycle in the linked list</em>. Otherwise, return <code class=\"bg-gray-100 px-1 py-0.5 rounded text-sm\">false</code>.</p><div class=\"space-y-4\"><div class=\"bg-gray-50 p-4 rounded-lg\"><h4 class=\"font-semibold mb-2\">Example 1:</h4><div class=\"font-mono text-sm\"><div><strong>Input:</strong> head = [3,2,0,-4], pos = 1</div><div><strong>Output:</strong> true</div><div><strong>Explanation:</strong> There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).</div></div></div><div class=\"bg-gray-50 p-4 rounded-lg\"><h4 class=\"font-semibold mb-2\">Example 2:</h4><div class=\"font-mono text-sm\"><div><strong>Input:</strong> head = [1,2], pos = 0</div><div><strong>Output:</strong> true</div><div><strong>Explanation:</strong> There is a cycle in the linked list, where the tail connects to the 0th node.</div></div></div><div class=\"bg-gray-50 p-4 rounded-lg\"><h4 class=\"font-semibold mb-2\">Example 3:</h4><div class=\"font-mono text-sm\"><div><strong>Input:</strong> head = [1], pos = -1</div><div><strong>Output:</strong> false</div><div><strong>Explanation:</strong> There is no cycle in the linked list.</div></div></div></div><div class=\"bg-blue-50 p-4 rounded-lg\"><h4 class=\"font-semibold mb-2 text-blue-800\">Constraints:</h4><ul class=\"list-disc list-inside space-y-1 text-sm\"><li>The number of the nodes in the list is in the range <code class=\"bg-white px-1 py-0.5 rounded\">[0, 10<sup>4</sup>]</code>.</li><li><code class=\"bg-white px-1 py-0.5 rounded\">-10<sup>5</sup> <= Node.val <= 10<sup>5</sup></code></li><li><code class=\"bg-white px-1 py-0.5 rounded\">pos</code> is <code class=\"bg-white px-1 py-0.5 rounded\">-1</code> or a <strong>valid index</strong> in the linked-list.</li></ul></div>",
  "starter_code": {
    "python": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        ",
    "javascript": "// Definition for singly-linked list.\n// function ListNode(val) {\n//     this.val = val;\n//     this.next = null;\n// }\nclass Solution {\n    hasCycle(head) {\n        \n    }\n}",
    "java": "// Definition for singly-linked list.\n// class ListNode {\n//     int val;\n//     ListNode next;\n//     ListNode(int x) {\n//         val = x;\n//         next = null;\n//     }\n// }\npublic class Solution {\n    public boolean hasCycle(ListNode head) {\n        \n    }\n}",
    "cpp": "// Definition for singly-linked list.\n// struct ListNode {\n//     int val;\n//     ListNode *next;\n//     ListNode(int x) : val(x), next(NULL) {}\n// };\nclass Solution {\npublic:\n    bool hasCycle(ListNode *head) {\n        \n    }\n};"
  }
}