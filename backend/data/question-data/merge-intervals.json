{
  "id": "33",
  "title": "Merge Intervals",
  "methodName": "merge",
  "signature": {
    "params": [
      {
        "name": "intervals",
        "type": "int[][]"
      }
    ],
    "return_type": "int[][]"
  },
  "difficulty": "Medium",
  "problemDescription": "Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.",
  "examples": [
    {
      "input": "intervals = [[1,3],[2,6],[8,10],[15,18]]",
      "output": "[[1,6],[8,10],[15,18]]"
    },
    {
      "input": "intervals = [[1,4],[4,5]]",
      "output": "[[1,5]]"
    }
  ],
  "constraints": [
    "1 <= intervals.length",
    "intervals[i].length == 2",
    "starti <= endi"
  ],
  "starter_code": {
    "python": "class Solution:\n    def merge(self, intervals: list[list[int]]) -> list[list[int]]:\n        ",
    "javascript": "class Solution {\n    merge(intervals) {\n        // @return {number[][]}\n        \n    }\n}",
    "java": "class Solution {\n    public int[][] merge(int[][] intervals) {\n        \n    }\n}",
    "cpp": "class Solution {\npublic:\n    vector<vector<int>> merge(vector<vector<int>>& intervals) {\n        \n    }\n};"
  }
}