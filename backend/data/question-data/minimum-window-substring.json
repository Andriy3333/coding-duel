{
  "id": "43",
  "title": "Minimum Window Substring",
  "methodName": "minWindow",
  "signature": {
    "params": [{"name": "s", "type": "string"}, {"name": "t", "type": "string"}],
    "return_type": "string"
  },
  "difficulty": "Hard",
  "description_html": "<p>Given two strings <code class=\"bg-gray-100 px-1 py-0.5 rounded text-sm\">s</code> and <code class=\"bg-gray-100 px-1 py-0.5 rounded text-sm\">t</code> of lengths <code class=\"bg-gray-100 px-1 py-0.5 rounded text-sm\">m</code> and <code class=\"bg-gray-100 px-1 py-0.5 rounded text-sm\">n</code> respectively, return <em>the <strong>minimum window substring</strong> of <code class=\"bg-gray-100 px-1 py-0.5 rounded text-sm\">s</code> such that every character in <code class=\"bg-gray-100 px-1 py-0.5 rounded text-sm\">t</code> (including duplicates) is included in the window</em>. If there is no such substring, return <em>the empty string <code class=\"bg-gray-100 px-1 py-0.5 rounded text-sm\">\"\"</code></em>.</p><p>The testcases will be generated such that the answer is <strong>unique</strong>.</p><p>A <strong>substring</strong> is a contiguous sequence of characters within the string.</p><div class=\"space-y-4\"><div class=\"bg-gray-50 p-4 rounded-lg\"><h4 class=\"font-semibold mb-2\">Example 1:</h4><div class=\"font-mono text-sm\"><div><strong>Input:</strong> s = \"ADOBECODEBANC\", t = \"ABC\"</div><div><strong>Output:</strong> \"BANC\"</div><div><strong>Explanation:</strong> The minimum window substring \"BANC\" includes 'A', 'B', and 'C' from string t.</div></div></div><div class=\"bg-gray-50 p-4 rounded-lg\"><h4 class=\"font-semibold mb-2\">Example 2:</h4><div class=\"font-mono text-sm\"><div><strong>Input:</strong> s = \"a\", t = \"a\"</div><div><strong>Output:</strong> \"a\"</div><div><strong>Explanation:</strong> The entire string s is the minimum window.</div></div></div><div class=\"bg-gray-50 p-4 rounded-lg\"><h4 class=\"font-semibold mb-2\">Example 3:</h4><div class=\"font-mono text-sm\"><div><strong>Input:</strong> s = \"a\", t = \"aa\"</div><div><strong>Output:</strong> \"\"</div><div><strong>Explanation:</strong> Both 'a's from t must be included in the window.</div><div>Since the largest window of s only has one 'a', return empty string.</div></div></div></div><div class=\"bg-blue-50 p-4 rounded-lg\"><h4 class=\"font-semibold mb-2 text-blue-800\">Constraints:</h4><ul class=\"list-disc list-inside space-y-1 text-sm\"><li><code class=\"bg-white px-1 py-0.5 rounded\">m == s.length</code></li><li><code class=\"bg-white px-1 py-0.5 rounded\">n == t.length</code></li><li><code class=\"bg-white px-1 py-0.5 rounded\">1 <= m, n <= 10<sup>5</sup></code></li><li><code class=\"bg-white px-1 py-0.5 rounded\">s</code> and <code class=\"bg-white px-1 py-0.5 rounded\">t</code> consist of uppercase and lowercase English letters.</li></ul></div><div class=\"bg-yellow-50 p-4 rounded-lg\"><h4 class=\"font-semibold mb-2 text-yellow-800\">Follow up:</h4><p class=\"text-sm\">Could you find an algorithm that runs in <code class=\"bg-white px-1 py-0.5 rounded\">O(m + n)</code> time?</p></div>",
  "starter_code": {
    "python": "class Solution:\n    def minWindow(self, s: str, t: str) -> str:\n        ",
    "javascript": "class Solution {\n    minWindow(s, t) {\n        \n    }\n}",
    "java": "class Solution {\n    public String minWindow(String s, String t) {\n        \n    }\n}",
    "cpp": "class Solution {\npublic:\n    string minWindow(string s, string t) {\n        \n    }\n};"
  }
}