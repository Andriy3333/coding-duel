{
  "id": "45",
  "title": "Serialize and Deserialize Binary Tree",
  "methodName": "serialize_deserialize",
  "difficulty": "Hard",
  "description_html": "<p>Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.</p><p>Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.</p><p><strong>Clarification:</strong> The input/output format is the same as <a href=\"/faq/#binary-tree\">how LeetCode serializes a binary tree</a>. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.</p><div class=\"space-y-4\"><div class=\"bg-gray-50 p-4 rounded-lg\"><h4 class=\"font-semibold mb-2\">Example 1:</h4><div class=\"font-mono text-sm\"><div><strong>Input:</strong> root = [1,2,3,null,null,4,5]</div><div><strong>Output:</strong> [1,2,3,null,null,4,5]</div></div></div><div class=\"bg-gray-50 p-4 rounded-lg\"><h4 class=\"font-semibold mb-2\">Example 2:</h4><div class=\"font-mono text-sm\"><div><strong>Input:</strong> root = []</div><div><strong>Output:</strong> []</div></div></div></div><div class=\"bg-blue-50 p-4 rounded-lg\"><h4 class=\"font-semibold mb-2 text-blue-800\">Constraints:</h4><ul class=\"list-disc list-inside space-y-1 text-sm\"><li>The number of nodes in the tree is in the range <code class=\"bg-white px-1 py-0.5 rounded\">[0, 10<sup>4</sup>]</code>.</li><li><code class=\"bg-white px-1 py-0.5 rounded\">-1000 <= Node.val <= 1000</code></li></ul></div>",
  "starter_code": {
    "python": "class Solution:\n    def serialize(self, root):\n        \n    \n    def deserialize(self, data):\n        ",
    "javascript": "class Solution {\n    serialize(root) {\n        \n    }\n    \n    deserialize(data) {\n        \n    }\n}",
    "java": "class Solution {\n    public String serialize(TreeNode root) {\n        \n    }\n    \n    public TreeNode deserialize(String data) {\n        \n    }\n}",
    "cpp": "class Solution {\npublic:\n    string serialize(TreeNode* root) {\n        \n    }\n    \n    TreeNode* deserialize(string data) {\n        \n    }\n};"
  }
}