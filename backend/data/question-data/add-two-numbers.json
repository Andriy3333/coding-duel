{
  "id": "2",
  "title": "Add Two Numbers",
  "methodName": "addTwoNumbers",
  "signature": {
    "params": [{"name": "l1", "type": "ListNode"}, {"name": "l2", "type": "ListNode"}],
    "return_type": "ListNode"
  },
  "difficulty": "Medium",
  "problemDescription": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list. You may assume the two numbers do not contain any leading zero, except the number 0 itself.",
  "examples": [
    { "input": "l1 = [2,4,3], l2 = [5,6,4]", "output": "[7,0,8]" },
    { "input": "l1 = [0], l2 = [0]", "output": "[0]" },
    { "input": "l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]", "output": "[8,9,9,9,0,0,0,1]" }
  ],
  "constraints": [
    "0 <= Node.val <= 9",
    "It is guaranteed that the list represents a number that does not have leading zeros"
  ],
  "starter_code": {
    "python": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\n        ",
    "javascript": "// Definition for singly-linked list.\nfunction ListNode(val, next) {\n    this.val = (val===undefined ? 0 : val);\n    this.next = (next===undefined ? null : next);\n}\n\nclass Solution {\n    addTwoNumbers(l1, l2) {\n        \n    }\n}",
    "java": "// Definition for singly-linked list.\nclass ListNode {\n    int val;\n    ListNode next;\n    ListNode() {}\n    ListNode(int val) { this.val = val; }\n    ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n}\n\nclass Solution {\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        \n    }\n}",
    "cpp": "// Definition for singly-linked list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        \n    }\n};"
  }
}