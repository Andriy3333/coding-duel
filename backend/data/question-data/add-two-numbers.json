{
  "id": "2",
  "title": "Add Two Numbers",
  "methodName": "addTwoNumbers",
  "signature": {
    "params": [{"name": "l1", "type": "ListNode"}, {"name": "l2", "type": "ListNode"}],
    "return_type": "ListNode"
  },
  "difficulty": "Medium",
  "description_html": "<p>You are given two <strong>non-empty</strong> linked lists representing two non-negative integers. The digits are stored in <strong>reverse order</strong>, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.</p><p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p><div class=\"space-y-4\"><div class=\"bg-gray-50 p-4 rounded-lg\"><h4 class=\"font-semibold mb-2\">Example 1:</h4><div class=\"font-mono text-sm\"><div><strong>Input:</strong> l1 = [2,4,3], l2 = [5,6,4]</div><div><strong>Output:</strong> [7,0,8]</div><div><strong>Explanation:</strong> 342 + 465 = 807.</div></div></div><div class=\"bg-gray-50 p-4 rounded-lg\"><h4 class=\"font-semibold mb-2\">Example 2:</h4><div class=\"font-mono text-sm\"><div><strong>Input:</strong> l1 = [0], l2 = [0]</div><div><strong>Output:</strong> [0]</div></div></div><div class=\"bg-gray-50 p-4 rounded-lg\"><h4 class=\"font-semibold mb-2\">Example 3:</h4><div class=\"font-mono text-sm\"><div><strong>Input:</strong> l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]</div><div><strong>Output:</strong> [8,9,9,9,0,0,0,1]</div></div></div></div><div class=\"bg-blue-50 p-4 rounded-lg\"><h4 class=\"font-semibold mb-2 text-blue-800\">Constraints:</h4><ul class=\"list-disc list-inside space-y-1 text-sm\"><li>The number of nodes in each linked list is in the range <code class=\"bg-white px-1 py-0.5 rounded\">[1, 100]</code>.</li><li><code class=\"bg-white px-1 py-0.5 rounded\">0 <= Node.val <= 9</code></li><li>It is guaranteed that the list represents a number that does not have leading zeros.</li></ul></div>",
  "starter_code": {
    "python": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass Solution:\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\n        ",
    "javascript": "// Definition for singly-linked list.\nfunction ListNode(val, next) {\n    this.val = (val===undefined ? 0 : val);\n    this.next = (next===undefined ? null : next);\n}\n\nclass Solution {\n    addTwoNumbers(l1, l2) {\n        \n    }\n}",
    "java": "// Definition for singly-linked list.\nclass ListNode {\n    int val;\n    ListNode next;\n    ListNode() {}\n    ListNode(int val) { this.val = val; }\n    ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n}\n\nclass Solution {\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        \n    }\n}",
    "cpp": "// Definition for singly-linked list.\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        \n    }\n};"
  }
}