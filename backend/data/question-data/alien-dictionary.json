{
  "id": "47",
  "title": "Alien Dictionary",
  "methodName": "alienOrder",
  "signature": {
    "params": [{"name": "words", "type": "string[]"}],
    "return_type": "string"
  },
  "difficulty": "Hard",
  "description_html": "<p>There is a new alien language that uses the English alphabet. However, the order among the letters is unknown to you.</p><p>You are given a list of strings <code class=\"bg-gray-100 px-1 py-0.5 rounded text-sm\">words</code> from the alien language's dictionary, where the strings in <code class=\"bg-gray-100 px-1 py-0.5 rounded text-sm\">words</code> are <strong>sorted lexicographically</strong> by the rules of this new language.</p><p>Return <em>a string of the unique letters in the new alien language sorted in <strong>lexicographically increasing order</strong> by the new language's rules. If there is no solution, return <code class=\"bg-gray-100 px-1 py-0.5 rounded text-sm\">\"\"</code>. If there are multiple solutions, return <strong>any of them</strong></em>.</p><p>A string <code class=\"bg-gray-100 px-1 py-0.5 rounded text-sm\">s</code> is <strong>lexicographically smaller</strong> than a string <code class=\"bg-gray-100 px-1 py-0.5 rounded text-sm\">t</code> if at the first position where they differ, the character in <code class=\"bg-gray-100 px-1 py-0.5 rounded text-sm\">s</code> comes before the character in <code class=\"bg-gray-100 px-1 py-0.5 rounded text-sm\">t</code> in the alien language. If the first <code class=\"bg-gray-100 px-1 py-0.5 rounded text-sm\">min(s.length, t.length)</code> characters are the same, then <code class=\"bg-gray-100 px-1 py-0.5 rounded text-sm\">s</code> is lexicographically smaller if and only if <code class=\"bg-gray-100 px-1 py-0.5 rounded text-sm\">s.length < t.length</code>.</p><div class=\"space-y-4\"><div class=\"bg-gray-50 p-4 rounded-lg\"><h4 class=\"font-semibold mb-2\">Example 1:</h4><div class=\"font-mono text-sm\"><div><strong>Input:</strong> words = [\"wrt\",\"wrf\",\"er\",\"ett\",\"rftt\"]</div><div><strong>Output:</strong> \"wertf\"</div></div></div><div class=\"bg-gray-50 p-4 rounded-lg\"><h4 class=\"font-semibold mb-2\">Example 2:</h4><div class=\"font-mono text-sm\"><div><strong>Input:</strong> words = [\"z\",\"x\"]</div><div><strong>Output:</strong> \"zx\"</div></div></div><div class=\"bg-gray-50 p-4 rounded-lg\"><h4 class=\"font-semibold mb-2\">Example 3:</h4><div class=\"font-mono text-sm\"><div><strong>Input:</strong> words = [\"z\",\"x\",\"z\"]</div><div><strong>Output:</strong> \"\"</div><div><strong>Explanation:</strong> The order is invalid, so return \"\".</div></div></div></div><div class=\"bg-blue-50 p-4 rounded-lg\"><h4 class=\"font-semibold mb-2 text-blue-800\">Constraints:</h4><ul class=\"list-disc list-inside space-y-1 text-sm\"><li><code class=\"bg-white px-1 py-0.5 rounded\">1 <= words.length <= 100</code></li><li><code class=\"bg-white px-1 py-0.5 rounded\">1 <= words[i].length <= 20</code></li><li><code class=\"bg-white px-1 py-0.5 rounded\">words[i]</code> consists of only lowercase English letters.</li></ul></div>",
  "starter_code": {
    "python": "class Solution:\n    def alienOrder(self, words: list[str]) -> str:\n        ",
    "javascript": "class Solution {\n    alienOrder(words) {\n        \n    }\n}",
    "java": "class Solution {\n    public String alienOrder(String[] words) {\n        \n    }\n}",
    "cpp": "class Solution {\npublic:\n    string alienOrder(vector<string>& words) {\n        \n    }\n};"
  }
}