{
  "id": "two-sum",
  "title": "Two Sum",
  "difficulty": "Easy",
  "tags": ["Array", "Hash Table"],
  "description_html": "<p>Given an array of integers <code class=\"bg-gray-100 px-1 py-0.5 rounded text-sm\">nums</code> and an integer <code class=\"bg-gray-100 px-1 py-0.5 rounded text-sm\">target</code>, return <em>indices of the two numbers such that they add up to target</em>.</p><p>You may assume that each input would have <strong>exactly one solution</strong>, and you may not use the same element twice.</p><p>You can return the answer in any order.</p>",
  "examples_html": "<div class=\"space-y-4\"><div class=\"bg-gray-50 p-4 rounded-lg\"><h4 class=\"font-semibold mb-2\">Example 1:</h4><div class=\"font-mono text-sm\"><div><strong>Input:</strong> nums = [2,7,11,15], target = 9</div><div><strong>Output:</strong> [0,1]</div><div><strong>Explanation:</strong> Because nums[0] + nums[1] == 9, we return [0, 1].</div></div></div><div class=\"bg-gray-50 p-4 rounded-lg\"><h4 class=\"font-semibold mb-2\">Example 2:</h4><div class=\"font-mono text-sm\"><div><strong>Input:</strong> nums = [3,2,4], target = 6</div><div><strong>Output:</strong> [1,2]</div></div></div><div class=\"bg-gray-50 p-4 rounded-lg\"><h4 class=\"font-semibold mb-2\">Example 3:</h4><div class=\"font-mono text-sm\"><div><strong>Input:</strong> nums = [3,3], target = 6</div><div><strong>Output:</strong> [0,1]</div></div></div></div>",
  "constraints_html": "<div class=\"bg-blue-50 p-4 rounded-lg\"><h4 class=\"font-semibold mb-2 text-blue-800\">Constraints:</h4><ul class=\"list-disc list-inside space-y-1 text-sm\"><li><code class=\"bg-white px-1 py-0.5 rounded\">2 <= nums.length <= 10<sup>4</sup></code></li><li><code class=\"bg-white px-1 py-0.5 rounded\">-10<sup>9</sup> <= nums[i] <= 10<sup>9</sup></code></li><li><code class=\"bg-white px-1 py-0.5 rounded\">-10<sup>9</sup> <= target <= 10<sup>9</sup></code></li><li><strong>Only one valid answer exists.</strong></li></ul></div>",
  "follow_up_html": "<div class=\"bg-yellow-50 p-4 rounded-lg\"><h4 class=\"font-semibold mb-2 text-yellow-800\">Follow-up:</h4><p class=\"text-sm\">Can you come up with an algorithm that is less than <code class=\"bg-white px-1 py-0.5 rounded\">O(n<sup>2</sup>)</code> time complexity?</p></div>",
  "starter_code": {
    "python": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        ",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n    \n};",
    "java": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        \n    }\n}",
    "cpp": "class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        \n    }\n};"
  },
  "test_cases": [
    {
      "input": {
        "nums": [2, 7, 11, 15],
        "target": 9
      },
      "expected_output": [0, 1],
      "is_hidden": false
    },
    {
      "input": {
        "nums": [3, 2, 4],
        "target": 6
      },
      "expected_output": [1, 2],
      "is_hidden": false
    },
    {
      "input": {
        "nums": [3, 3],
        "target": 6
      },
      "expected_output": [0, 1],
      "is_hidden": false
    },
    {
      "input": {
        "nums": [1, 2, 3, 4, 5],
        "target": 9
      },
      "expected_output": [3, 4],
      "is_hidden": true
    },
    {
      "input": {
        "nums": [-1, -2, -3, -4, -5],
        "target": -8
      },
      "expected_output": [2, 4],
      "is_hidden": true
    }
  ],
  "hints": [
    "A really brute force way would be to search for all possible pairs of numbers but that would be too slow. Again, it's best to try out brute force solutions for just for completeness. It is from these brute force solutions that you can come up with optimizations.",
    "So, if we fix one of the numbers, say x, we have to scan the entire array to find the next number y which is value - x where value is the input parameter. Can we change our array somehow so that this search becomes faster?",
    "The second train of thought is, without changing the array, can we use additional space somehow? Like maybe a hash map to speed up the search?"
  ],
  "solution_approach": {
    "time_complexity": "O(n)",
    "space_complexity": "O(n)",
    "approach": "Hash Map"
  },
  "metadata": {
    "acceptance_rate": "51.3%",
    "total_accepted": "4.1M",
    "total_submissions": "8.0M",
    "created_at": "2015-07-01",
    "last_updated": "2024-01-15"
  }
}
