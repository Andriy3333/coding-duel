{
  "id": "28",
  "title": "3Sum",
  "methodName": "threeSum",
  "signature": {
    "params": [
      {
        "name": "nums",
        "type": "int[]"
      }
    ],
    "return_type": "int[][]"
  },
  "difficulty": "Medium",
  "problemDescription": "Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0. Notice that the solution set must not contain duplicate triplets.",
  "examples": [
    {
      "input": "nums = [-1,0,1,2,-1,-4]",
      "output": "[[-1,-1,2],[-1,0,1]]"
    },
    {
      "input": "nums = [0,1,1]",
      "output": "[]"
    },
    {
      "input": "nums = [0,0,0]",
      "output": "[[0,0,0]]"
    }
  ],
  "constraints": [
    "3 <= nums.length"
  ],
  "starter_code": {
    "python": "class Solution:\n    def threeSum(self, nums: list[int]) -> list[list[int]]:\n        ",
    "javascript": "class Solution {\n    threeSum(nums) {\n        // @return {number[][]}\n        \n    }\n}",
    "java": "class Solution {\n    public List<List<Integer>> threeSum(int[] nums) {\n        \n    }\n}",
    "cpp": "class Solution {\npublic:\n    vector<vector<int>> threeSum(vector<int>& nums) {\n        \n    }\n};"
  }
}