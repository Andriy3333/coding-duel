{
  "id": "48",
  "title": "Longest Increasing Path in a Matrix",
  "methodName": "longestIncreasingPath",
  "signature": {
    "params": [{"name": "matrix", "type": "int[][]"}],
    "return_type": "int"
  },
  "difficulty": "Hard",
  "problemDescription": "Given an m x n integers matrix, return the length of the longest increasing path in matrix. From each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).",
  "examples": [
    {"input": "matrix = [[9,9,4],[6,6,8],[2,1,1]]", "output": "4"},
    {"input": "matrix = [[3,4,5],[3,2,6],[2,2,1]]", "output": "4"},
    {"input": "matrix = [[1]]", "output": "1"}
  ],
  "constraints": [],
  "starter_code": {
    "python": "class Solution:\n    def longestIncreasingPath(self, matrix: list[list[int]]) -> int:\n        ",
    "javascript": "class Solution {\n    longestIncreasingPath(matrix) {\n        \n    }\n}",
    "java": "class Solution {\n    public int longestIncreasingPath(int[][] matrix) {\n        \n    }\n}",
    "cpp": "class Solution {\npublic:\n    int longestIncreasingPath(vector<vector<int>>& matrix) {\n        \n    }\n};"
  }
}